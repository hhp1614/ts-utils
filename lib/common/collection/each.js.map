{"version":3,"file":"each.js","sourceRoot":"","sources":["../../../src/common/collection/each.ts"],"names":[],"mappings":";;;AAAA,gCAAkD;AAmClD;;;;GAIG;AACH,SAAgB,IAAI,CAAC,UAAe,EAAE,QAAwC;IAC5E,IAAI,UAAU,IAAI,IAAI,EAAE;QACtB,MAAM,IAAI,SAAS,CAAC,wBAAwB,CAAC,CAAC;KAC/C;IACD,IAAI,CAAC,iBAAU,CAAC,QAAQ,CAAC,EAAE;QACzB,MAAM,IAAI,SAAS,CAAC,kBAAkB,CAAC,CAAC;KACzC;IAED,IAAI,kBAAW,CAAC,UAAU,CAAC,EAAE;QAC3B,WAAW;QACX,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,QAAM,GAAG,UAAU,CAAC,MAAM,EAAE,CAAC,GAAG,QAAM,EAAE,CAAC,EAAE,EAAE;YAC3D,QAAQ,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;SAC5B;KACF;SAAM;QACL,OAAO;QACP,IAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;YACpC,IAAM,GAAG,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;YACpB,QAAQ,CAAC,UAAU,CAAC,GAAG,CAAC,EAAE,GAAG,CAAC,CAAC;SAChC;KACF;AACH,CAAC;AArBD,oBAqBC","sourcesContent":["import { isArrayLike, isFunction } from '../type';\r\n\r\ninterface ArrayLike<T> {\r\n  readonly length: number;\r\n  readonly [n: number]: T;\r\n}\r\n\r\n/**\r\n * 遍历数组\r\n * @param collection 需要遍历的数组\r\n * @param callback 回调函数\r\n */\r\nexport function each<T>(collection: T[], callback: (value: T, index: number) => void): void;\r\n\r\n/**\r\n * 遍历字符串\r\n * @param collection 需要遍历的字符串\r\n * @param callback 回调函数\r\n */\r\nexport function each(collection: string, callback: (value: string, index: number) => void): void;\r\n\r\n/**\r\n * 遍历类数组\r\n * @param collection 需要遍历的类数组\r\n * @param callback 回调函数\r\n */\r\nexport function each<T>(collection: ArrayLike<T>, callback: (value: T, index: number) => void): void;\r\n\r\n/**\r\n * 遍历对象\r\n * @param collection 需要遍历的对象\r\n * @param callback 回调函数\r\n */\r\nexport function each<T extends object>(collection: T, callback: (value: T[keyof T], key: string) => void): void;\r\n\r\n/**\r\n * 遍历数组、类数组和对象\r\n * @param collection 需要遍历的数组、类数组和对象\r\n * @param callback 回调函数\r\n */\r\nexport function each(collection: any, callback: (value: any, key: any) => void) {\r\n  if (collection == null) {\r\n    throw new TypeError('`collection` 类型错误，无法遍历');\r\n  }\r\n  if (!isFunction(callback)) {\r\n    throw new TypeError('`callback` 必须是函数');\r\n  }\r\n\r\n  if (isArrayLike(collection)) {\r\n    // 处理数组和类数组\r\n    for (let i = 0, length = collection.length; i < length; i++) {\r\n      callback(collection[i], i);\r\n    }\r\n  } else {\r\n    // 处理对象\r\n    const keys = Object.keys(collection);\r\n    for (let i = 0; i < keys.length; i++) {\r\n      const key = keys[i];\r\n      callback(collection[key], key);\r\n    }\r\n  }\r\n}\r\n"]}
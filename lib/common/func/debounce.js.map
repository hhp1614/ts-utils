{"version":3,"file":"debounce.js","sourceRoot":"","sources":["../../../src/common/func/debounce.ts"],"names":[],"mappings":";;;AAAA,gCAA+C;AAE/C;;;;;;;GAOG;AACH,SAAgB,QAAQ,CAAC,IAAc,EAAE,IAAY,EAAE,SAAiB;IAAjB,0BAAA,EAAA,iBAAiB;IACtE,IAAI,CAAC,iBAAU,CAAC,IAAI,CAAC,EAAE;QACrB,MAAM,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;KACrC;IACD,IAAI,CAAC,eAAQ,CAAC,IAAI,CAAC,EAAE;QACnB,MAAM,IAAI,SAAS,CAAC,cAAc,CAAC,CAAC;KACrC;IAED,IAAI,OAAY,CAAC;IAEjB,IAAM,SAAS,GAAG;QAAA,iBAoBjB;QApB2B,cAAmB;aAAnB,UAAmB,EAAnB,qBAAmB,EAAnB,IAAmB;YAAnB,yBAAmB;;QAC7C,IAAI,OAAO,EAAE;YACX,YAAY,CAAC,OAAO,CAAC,CAAC;SACvB;QACD,IAAI,SAAS,EAAE;YACb,sCAAsC;YACtC,IAAM,OAAO,GAAG,CAAC,OAAO,CAAC;YACzB,OAAO,GAAG,UAAU,CAAC;gBACnB,OAAO,GAAG,IAAI,CAAC;YACjB,CAAC,EAAE,IAAI,CAAC,CAAC;YACT,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aACxB;SACF;aAAM;YACL,+BAA+B;YAC/B,OAAO,GAAG,UAAU,CAAC;gBACnB,IAAI,CAAC,KAAK,CAAC,KAAI,EAAE,IAAI,CAAC,CAAC;gBACvB,OAAO,GAAG,IAAI,CAAC;YACjB,CAAC,EAAE,IAAI,CAAC,CAAC;SACV;IACH,CAAC,CAAC;IAEF;;OAEG;IACH,SAAS,CAAC,MAAM,GAAG;QACjB,YAAY,CAAC,OAAO,CAAC,CAAC;QACtB,OAAO,GAAG,IAAI,CAAC;IACjB,CAAC,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC;AAzCD,4BAyCC","sourcesContent":["import { isFunction, isNumber } from '../type';\r\n\r\n/**\r\n * 函数防抖\r\n * @description 限制事件的频繁触发\r\n * @description 将需要延迟执行的函数(`func`)在函数(`debounce`)最后一次调用时的 `wait` 毫秒后执行\r\n * @param func 需要防抖处理的函数\r\n * @param wait 延迟执行的时间，单位毫秒\r\n * @param immediate 是否立即执行，默认 `false`\r\n */\r\nexport function debounce(func: Function, wait: number, immediate = false) {\r\n  if (!isFunction(func)) {\r\n    throw new TypeError('`func` 必须是函数');\r\n  }\r\n  if (!isNumber(wait)) {\r\n    throw new TypeError('`wait` 必须是数字');\r\n  }\r\n\r\n  let timeout: any;\r\n\r\n  const debounced = function (...args: Array<any>) {\r\n    if (timeout) {\r\n      clearTimeout(timeout);\r\n    }\r\n    if (immediate) {\r\n      // 立即执行函数，wait 毫秒内不再执行函数才可以重新触发执行 func\r\n      const callNow = !timeout;\r\n      timeout = setTimeout(() => {\r\n        timeout = null;\r\n      }, wait);\r\n      if (callNow) {\r\n        func.apply(this, args);\r\n      }\r\n    } else {\r\n      // 执行完函数 wait 毫秒后才可以重新触发执行 func\r\n      timeout = setTimeout(() => {\r\n        func.apply(this, args);\r\n        timeout = null;\r\n      }, wait);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * 取消防抖\r\n   */\r\n  debounced.cancel = () => {\r\n    clearTimeout(timeout);\r\n    timeout = null;\r\n  };\r\n\r\n  return debounced;\r\n}\r\n"]}
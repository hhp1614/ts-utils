{"version":3,"file":"timeFormat.js","sourceRoot":"","sources":["../../../src/common/time/timeFormat.ts"],"names":[],"mappings":";;;AAAA,gCAAmC;AAmBnC;;;;GAIG;AACH,SAAgB,UAAU,CAAC,IAAyC,EAAE,MAA8B;IAAzE,qBAAA,EAAA,WAAmC,IAAI,EAAE;IAAE,uBAAA,EAAA,8BAA8B;IAClG,IAAM,CAAC,GAAG,IAAI,IAAI,CAAC,IAAI,CAAC,CAAC;IAEzB,IAAI,CAAC,CAAC,YAAY,EAAE,KAAK,cAAc,EAAE;QACvC,MAAM,IAAI,KAAK,CAAC,wBAAwB,CAAC,CAAC;KAC3C;IACD,IAAI,CAAC,eAAQ,CAAC,MAAM,CAAC,EAAE;QACrB,MAAM,IAAI,SAAS,CAAC,iBAAiB,CAAC,CAAC;KACxC;IAED,IAAM,CAAC,GAAe;QACpB,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,WAAW,EAAE,CAAC;QAC7B,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;QAC/B,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,OAAO,EAAE,CAAC;QACzB,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,QAAQ,EAAE,CAAC;QAC1B,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,UAAU,EAAE,CAAC;QAC/B,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC,eAAe,EAAE,CAAC;KAC1C,CAAC;IAEF,OAAO,MAAM,CAAC,OAAO,CAAC,oCAAoC,EAAE,UAAA,GAAG;QAC7D,QAAQ,GAAG,EAAE;YACX,KAAK,MAAM;gBACT,OAAO,CAAC,CAAC,IAAI,CAAC;YAChB,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;YAC3B,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YAClC,KAAK,GAAG;gBACN,OAAO,CAAC,CAAC,KAAK,CAAC;YACjB,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACjC,KAAK,GAAG;gBACN,OAAO,CAAC,CAAC,IAAI,CAAC;YAChB,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACjC,KAAK,GAAG;gBACN,OAAO,CAAC,CAAC,IAAI,CAAC;YAChB,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACpC,KAAK,GAAG;gBACN,OAAO,CAAC,CAAC,OAAO,CAAC;YACnB,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACpC,KAAK,GAAG;gBACN,OAAO,CAAC,CAAC,OAAO,CAAC;YACnB,KAAK,IAAI;gBACP,OAAO,CAAC,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,CAAC;YACzC,KAAK,GAAG;gBACN,OAAO,CAAC,CAAC,YAAY,CAAC;SACzB;QACD,OAAO,GAAG,CAAC;IACb,CAAC,CAAC,CAAC;AACL,CAAC;AArDD,gCAqDC","sourcesContent":["import { isString } from '../type';\n\ntype TimeObject = {\n  // 年\n  year: string;\n  // 月\n  month: string;\n  // 日\n  date: string;\n  // 时\n  hour: string;\n  // 分\n  minutes: string;\n  // 秒\n  seconds: string;\n  // 毫秒\n  milliseconds: string;\n};\n\n/**\n * 时间格式化\n * @param time 时间对象、时间戳、可转换为时间对象字符串\n * @param format 格式，默认：`YYYY-MM-DD hh:mm:ss`\n */\nexport function timeFormat(time: Date | number | string = new Date(), format = 'YYYY-MM-DD hh:mm:ss') {\n  const D = new Date(time);\n\n  if (D.toDateString() === 'Invalid Date') {\n    throw new Error('`time` 无法转化为有效 Date 对象');\n  }\n  if (!isString(format)) {\n    throw new TypeError('`format` 必须是字符串');\n  }\n\n  const t: TimeObject = {\n    year: String(D.getFullYear()),\n    month: String(D.getMonth() + 1),\n    date: String(D.getDate()),\n    hour: String(D.getHours()),\n    minutes: String(D.getMinutes()),\n    seconds: String(D.getSeconds()),\n    milliseconds: String(D.getMilliseconds())\n  };\n\n  return format.replace(/(YY(YY)?|MM?|DD?|hh?|mm?|ss?|SS?)/g, str => {\n    switch (str) {\n      case 'YYYY':\n        return t.year;\n      case 'YY':\n        return t.year.substr(-2);\n      case 'MM':\n        return t.month.padStart(2, '0');\n      case 'M':\n        return t.month;\n      case 'DD':\n        return t.date.padStart(2, '0');\n      case 'D':\n        return t.date;\n      case 'hh':\n        return t.hour.padStart(2, '0');\n      case 'h':\n        return t.hour;\n      case 'mm':\n        return t.minutes.padStart(2, '0');\n      case 'm':\n        return t.minutes;\n      case 'ss':\n        return t.seconds.padStart(2, '0');\n      case 's':\n        return t.seconds;\n      case 'SS':\n        return t.milliseconds.padStart(3, '0');\n      case 'S':\n        return t.milliseconds;\n    }\n    return str;\n  });\n}\n"]}